#include <seccomp.h>
#include <simlib/sandbox/seccomp/allow_common_safe_syscalls.hh>
#include <simlib/sandbox/seccomp/bpf_builder.hh>
#include <sys/ioctl.h>

namespace sandbox::seccomp {

void allow_common_safe_syscalls(BpfBuilder& bpf) {
    bpf.allow_syscall(SCMP_SYS(_llseek));
    bpf.allow_syscall(SCMP_SYS(accept));
    bpf.allow_syscall(SCMP_SYS(accept4));
    bpf.allow_syscall(SCMP_SYS(access));
    bpf.allow_syscall(SCMP_SYS(alarm));
    bpf.allow_syscall(SCMP_SYS(arch_prctl));
    bpf.allow_syscall(SCMP_SYS(bind));
    bpf.allow_syscall(SCMP_SYS(brk));
    bpf.allow_syscall(SCMP_SYS(capget));
    bpf.allow_syscall(SCMP_SYS(capset));
    bpf.allow_syscall(SCMP_SYS(chdir));
    bpf.allow_syscall(SCMP_SYS(chmod));
    bpf.allow_syscall(SCMP_SYS(chown));
    bpf.allow_syscall(SCMP_SYS(chown32));
    bpf.allow_syscall(SCMP_SYS(clock_getres));
    bpf.allow_syscall(SCMP_SYS(clock_getres_time64));
    bpf.allow_syscall(SCMP_SYS(clock_gettime));
    bpf.allow_syscall(SCMP_SYS(clock_gettime64));
    bpf.allow_syscall(SCMP_SYS(clock_nanosleep));
    bpf.allow_syscall(SCMP_SYS(clock_nanosleep_time64));
    bpf.allow_syscall(SCMP_SYS(clone));
    bpf.allow_syscall(SCMP_SYS(clone3));
    bpf.allow_syscall(SCMP_SYS(close));
    bpf.allow_syscall(SCMP_SYS(close_range));
    bpf.allow_syscall(SCMP_SYS(connect));
    bpf.allow_syscall(SCMP_SYS(copy_file_range));
    bpf.allow_syscall(SCMP_SYS(creat));
    bpf.allow_syscall(SCMP_SYS(dup));
    bpf.allow_syscall(SCMP_SYS(dup2));
    bpf.allow_syscall(SCMP_SYS(dup3));
    bpf.allow_syscall(SCMP_SYS(epoll_create));
    bpf.allow_syscall(SCMP_SYS(epoll_create1));
    bpf.allow_syscall(SCMP_SYS(epoll_ctl));
    bpf.allow_syscall(SCMP_SYS(epoll_pwait));
    bpf.allow_syscall(SCMP_SYS(epoll_pwait2));
    bpf.allow_syscall(SCMP_SYS(epoll_wait));
    bpf.allow_syscall(SCMP_SYS(eventfd));
    bpf.allow_syscall(SCMP_SYS(eventfd2));
    bpf.allow_syscall(SCMP_SYS(execve));
    bpf.allow_syscall(SCMP_SYS(execveat));
    bpf.allow_syscall(SCMP_SYS(exit));
    bpf.allow_syscall(SCMP_SYS(exit_group));
    bpf.allow_syscall(SCMP_SYS(faccessat));
    bpf.allow_syscall(SCMP_SYS(faccessat2));
    bpf.allow_syscall(SCMP_SYS(fadvise64));
    bpf.allow_syscall(SCMP_SYS(fadvise64_64));
    bpf.allow_syscall(SCMP_SYS(fchdir));
    bpf.allow_syscall(SCMP_SYS(fchmod));
    bpf.allow_syscall(SCMP_SYS(fchmodat));
    bpf.allow_syscall(SCMP_SYS(fchown));
    bpf.allow_syscall(SCMP_SYS(fchown32));
    bpf.allow_syscall(SCMP_SYS(fchownat));
    bpf.allow_syscall(SCMP_SYS(fcntl));
    bpf.allow_syscall(SCMP_SYS(fcntl64));
    bpf.allow_syscall(SCMP_SYS(fdatasync));
    bpf.allow_syscall(SCMP_SYS(fork));
    bpf.allow_syscall(SCMP_SYS(fsconfig));
    bpf.allow_syscall(SCMP_SYS(fsmount));
    bpf.allow_syscall(SCMP_SYS(fsopen));
    bpf.allow_syscall(SCMP_SYS(fspick));
    bpf.allow_syscall(SCMP_SYS(fstat));
    bpf.allow_syscall(SCMP_SYS(fstat64));
    bpf.allow_syscall(SCMP_SYS(fstatat64));
    bpf.allow_syscall(SCMP_SYS(fsync));
    bpf.allow_syscall(SCMP_SYS(ftruncate));
    bpf.allow_syscall(SCMP_SYS(ftruncate64));
    bpf.allow_syscall(SCMP_SYS(futex));
    bpf.allow_syscall(SCMP_SYS(futex_time64));
    bpf.allow_syscall(SCMP_SYS(get_robust_list));
    bpf.allow_syscall(SCMP_SYS(get_thread_area));
    bpf.allow_syscall(SCMP_SYS(getcwd));
    bpf.allow_syscall(SCMP_SYS(getdents));
    bpf.allow_syscall(SCMP_SYS(getdents64));
    bpf.allow_syscall(SCMP_SYS(getegid));
    bpf.allow_syscall(SCMP_SYS(geteuid));
    bpf.allow_syscall(SCMP_SYS(getgid));
    bpf.allow_syscall(SCMP_SYS(getitimer));
    bpf.allow_syscall(SCMP_SYS(getpgid));
    bpf.allow_syscall(SCMP_SYS(getpgrp));
    bpf.allow_syscall(SCMP_SYS(getpid));
    bpf.allow_syscall(SCMP_SYS(getppid));
    bpf.allow_syscall(SCMP_SYS(getrandom));
    bpf.allow_syscall(SCMP_SYS(getresgid));
    bpf.allow_syscall(SCMP_SYS(getresuid));
    bpf.allow_syscall(SCMP_SYS(getrlimit));
    bpf.allow_syscall(SCMP_SYS(getrusage));
    bpf.allow_syscall(SCMP_SYS(getsid));
    bpf.allow_syscall(SCMP_SYS(getsockname));
    bpf.allow_syscall(SCMP_SYS(getsockopt));
    bpf.allow_syscall(SCMP_SYS(gettid));
    bpf.allow_syscall(SCMP_SYS(gettimeofday));
    bpf.allow_syscall(SCMP_SYS(getuid));
    bpf.allow_syscall(SCMP_SYS(inotify_add_watch));
    bpf.allow_syscall(SCMP_SYS(inotify_init));
    bpf.allow_syscall(SCMP_SYS(inotify_init1));
    bpf.allow_syscall(SCMP_SYS(inotify_rm_watch));
    bpf.allow_syscall(SCMP_SYS(ioctl), sandbox::seccomp::ARG1_EQ{TCGETS});
    bpf.allow_syscall(SCMP_SYS(kcmp));
    bpf.allow_syscall(SCMP_SYS(kill));
    bpf.allow_syscall(SCMP_SYS(lchown));
    bpf.allow_syscall(SCMP_SYS(link));
    bpf.allow_syscall(SCMP_SYS(linkat));
    bpf.allow_syscall(SCMP_SYS(listen));
    bpf.allow_syscall(SCMP_SYS(lseek));
    bpf.allow_syscall(SCMP_SYS(lstat));
    bpf.allow_syscall(SCMP_SYS(lstat64));
    bpf.allow_syscall(SCMP_SYS(madvise));
    bpf.allow_syscall(SCMP_SYS(memfd_create));
    bpf.allow_syscall(SCMP_SYS(memfd_secret));
    bpf.allow_syscall(SCMP_SYS(mkdir));
    bpf.allow_syscall(SCMP_SYS(mkdirat));
    bpf.allow_syscall(SCMP_SYS(mlock));
    bpf.allow_syscall(SCMP_SYS(mlock2));
    bpf.allow_syscall(SCMP_SYS(mlockall));
    bpf.allow_syscall(SCMP_SYS(mmap));
    bpf.allow_syscall(SCMP_SYS(mmap2));
    bpf.allow_syscall(SCMP_SYS(move_mount));
    bpf.allow_syscall(SCMP_SYS(mprotect));
    bpf.allow_syscall(SCMP_SYS(mremap));
    bpf.allow_syscall(SCMP_SYS(msync));
    bpf.allow_syscall(SCMP_SYS(munlock));
    bpf.allow_syscall(SCMP_SYS(munlockall));
    bpf.allow_syscall(SCMP_SYS(munmap));
    bpf.allow_syscall(SCMP_SYS(name_to_handle_at));
    bpf.allow_syscall(SCMP_SYS(nanosleep));
    bpf.allow_syscall(SCMP_SYS(newfstatat));
    bpf.allow_syscall(SCMP_SYS(nice));
    bpf.allow_syscall(SCMP_SYS(oldfstat));
    bpf.allow_syscall(SCMP_SYS(oldlstat));
    bpf.allow_syscall(SCMP_SYS(oldolduname));
    bpf.allow_syscall(SCMP_SYS(oldstat));
    bpf.allow_syscall(SCMP_SYS(olduname));
    bpf.allow_syscall(SCMP_SYS(open));
    bpf.allow_syscall(SCMP_SYS(open_by_handle_at));
    bpf.allow_syscall(SCMP_SYS(open_tree));
    bpf.allow_syscall(SCMP_SYS(openat));
    bpf.allow_syscall(SCMP_SYS(openat2));
    bpf.allow_syscall(SCMP_SYS(pause));
    bpf.allow_syscall(SCMP_SYS(pidfd_getfd));
    bpf.allow_syscall(SCMP_SYS(pidfd_open));
    bpf.allow_syscall(SCMP_SYS(pidfd_send_signal));
    bpf.allow_syscall(SCMP_SYS(pipe));
    bpf.allow_syscall(SCMP_SYS(pipe2));
    bpf.allow_syscall(SCMP_SYS(poll));
    bpf.allow_syscall(SCMP_SYS(ppoll));
    bpf.allow_syscall(SCMP_SYS(ppoll_time64));
    bpf.allow_syscall(SCMP_SYS(pread64));
    bpf.allow_syscall(SCMP_SYS(preadv));
    bpf.allow_syscall(SCMP_SYS(preadv2));
    bpf.allow_syscall(SCMP_SYS(prlimit64));
    bpf.allow_syscall(SCMP_SYS(pselect6));
    bpf.allow_syscall(SCMP_SYS(pselect6_time64));
    bpf.allow_syscall(SCMP_SYS(pwrite64));
    bpf.allow_syscall(SCMP_SYS(pwritev));
    bpf.allow_syscall(SCMP_SYS(pwritev2));
    bpf.allow_syscall(SCMP_SYS(read));
    bpf.allow_syscall(SCMP_SYS(readahead));
    bpf.allow_syscall(SCMP_SYS(readdir));
    bpf.allow_syscall(SCMP_SYS(readlink));
    bpf.allow_syscall(SCMP_SYS(readlinkat));
    bpf.allow_syscall(SCMP_SYS(readv));
    bpf.allow_syscall(SCMP_SYS(recvfrom));
    bpf.allow_syscall(SCMP_SYS(recvmmsg));
    bpf.allow_syscall(SCMP_SYS(recvmmsg_time64));
    bpf.allow_syscall(SCMP_SYS(recvmsg));
    bpf.allow_syscall(SCMP_SYS(rename));
    bpf.allow_syscall(SCMP_SYS(renameat2));
    bpf.allow_syscall(SCMP_SYS(rmdir));
    bpf.allow_syscall(SCMP_SYS(rseq));
    bpf.allow_syscall(SCMP_SYS(rt_sigaction));
    bpf.allow_syscall(SCMP_SYS(rt_sigpending));
    bpf.allow_syscall(SCMP_SYS(rt_sigprocmask));
    bpf.allow_syscall(SCMP_SYS(rt_sigqueueinfo));
    bpf.allow_syscall(SCMP_SYS(rt_sigreturn));
    bpf.allow_syscall(SCMP_SYS(rt_sigsuspend));
    bpf.allow_syscall(SCMP_SYS(rt_sigtimedwait));
    bpf.allow_syscall(SCMP_SYS(rt_sigtimedwait_time64));
    bpf.allow_syscall(SCMP_SYS(rt_tgsigqueueinfo));
    bpf.allow_syscall(SCMP_SYS(sched_yield));
    bpf.allow_syscall(SCMP_SYS(seccomp));
    bpf.allow_syscall(SCMP_SYS(select));
    bpf.allow_syscall(SCMP_SYS(semctl));
    bpf.allow_syscall(SCMP_SYS(semget));
    bpf.allow_syscall(SCMP_SYS(semop));
    bpf.allow_syscall(SCMP_SYS(semtimedop));
    bpf.allow_syscall(SCMP_SYS(semtimedop_time64));
    bpf.allow_syscall(SCMP_SYS(send));
    bpf.allow_syscall(SCMP_SYS(sendfile));
    bpf.allow_syscall(SCMP_SYS(sendfile64));
    bpf.allow_syscall(SCMP_SYS(sendmmsg));
    bpf.allow_syscall(SCMP_SYS(sendmsg));
    bpf.allow_syscall(SCMP_SYS(sendto));
    bpf.allow_syscall(SCMP_SYS(set_robust_list));
    bpf.allow_syscall(SCMP_SYS(set_thread_area));
    bpf.allow_syscall(SCMP_SYS(set_tid_address));
    bpf.allow_syscall(SCMP_SYS(setitimer));
    bpf.allow_syscall(SCMP_SYS(setpgid));
    bpf.allow_syscall(SCMP_SYS(setrlimit));
    bpf.allow_syscall(SCMP_SYS(setsid));
    bpf.allow_syscall(SCMP_SYS(setsockopt));
    bpf.allow_syscall(SCMP_SYS(shutdown));
    bpf.allow_syscall(SCMP_SYS(sigaction));
    bpf.allow_syscall(SCMP_SYS(sigaltstack));
    bpf.allow_syscall(SCMP_SYS(signal));
    bpf.allow_syscall(SCMP_SYS(signalfd));
    bpf.allow_syscall(SCMP_SYS(signalfd4));
    bpf.allow_syscall(SCMP_SYS(sigpending));
    bpf.allow_syscall(SCMP_SYS(sigprocmask));
    bpf.allow_syscall(SCMP_SYS(sigreturn));
    bpf.allow_syscall(SCMP_SYS(sigsuspend));
    bpf.allow_syscall(SCMP_SYS(socket));
    bpf.allow_syscall(SCMP_SYS(socketcall));
    bpf.allow_syscall(SCMP_SYS(socketpair));
    bpf.allow_syscall(SCMP_SYS(splice));
    bpf.allow_syscall(SCMP_SYS(stat));
    bpf.allow_syscall(SCMP_SYS(stat64));
    bpf.allow_syscall(SCMP_SYS(statx));
    bpf.allow_syscall(SCMP_SYS(symlink));
    bpf.allow_syscall(SCMP_SYS(symlinkat));
    bpf.allow_syscall(SCMP_SYS(sync_file_range));
    bpf.allow_syscall(SCMP_SYS(tee));
    bpf.allow_syscall(SCMP_SYS(tgkill));
    bpf.allow_syscall(SCMP_SYS(time));
    bpf.allow_syscall(SCMP_SYS(timer_create));
    bpf.allow_syscall(SCMP_SYS(timer_delete));
    bpf.allow_syscall(SCMP_SYS(timer_getoverrun));
    bpf.allow_syscall(SCMP_SYS(timer_gettime));
    bpf.allow_syscall(SCMP_SYS(timer_gettime64));
    bpf.allow_syscall(SCMP_SYS(timerfd_create));
    bpf.allow_syscall(SCMP_SYS(timerfd_gettime));
    bpf.allow_syscall(SCMP_SYS(timerfd_gettime64));
    bpf.allow_syscall(SCMP_SYS(times));
    bpf.allow_syscall(SCMP_SYS(truncate));
    bpf.allow_syscall(SCMP_SYS(truncate64));
    bpf.allow_syscall(SCMP_SYS(umask));
    bpf.allow_syscall(SCMP_SYS(uname));
    bpf.allow_syscall(SCMP_SYS(unlink));
    bpf.allow_syscall(SCMP_SYS(unlinkat));
    bpf.allow_syscall(SCMP_SYS(utime));
    bpf.allow_syscall(SCMP_SYS(utimensat));
    bpf.allow_syscall(SCMP_SYS(utimensat_time64));
    bpf.allow_syscall(SCMP_SYS(utimes));
    bpf.allow_syscall(SCMP_SYS(vfork));
    bpf.allow_syscall(SCMP_SYS(vmsplice));
    bpf.allow_syscall(SCMP_SYS(wait4));
    bpf.allow_syscall(SCMP_SYS(waitid));
    bpf.allow_syscall(SCMP_SYS(waitpid));
    bpf.allow_syscall(SCMP_SYS(write));
    bpf.allow_syscall(SCMP_SYS(writev));
}

} // namespace sandbox::seccomp
